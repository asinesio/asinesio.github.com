<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grails | Andy Sinesio]]></title>
  <link href="http://asinesio.github.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://asinesio.github.com/"/>
  <updated>2013-05-21T00:33:37-05:00</updated>
  <id>http://asinesio.github.com/</id>
  <author>
    <name><![CDATA[Andy Sinesio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Perils of the Grails Searchable Plugin]]></title>
    <link href="http://asinesio.github.com/blog/2013/02/23/the-perils-of-the-grails-searchable-plugin/"/>
    <updated>2013-02-23T00:05:00-06:00</updated>
    <id>http://asinesio.github.com/blog/2013/02/23/the-perils-of-the-grails-searchable-plugin</id>
    <content type="html"><![CDATA[<p>The <a href="http://grails.org/plugin/searchable">Grails Searchable Plugin</a> is generally where developers end up when they are looking to add full-text searching to their Grails application.</p>

<p>It's got a lot going for it:</p>

<ul>
<li>Simple, embedded Lucene index with minimal initial setup.</li>
<li>Automatic GORM mirroring of changes.</li>
<li>Widely used; according to Grails.org, it's installed in almost <em>7% of Grails projects</em>.</li>
<li>Fast and simple, it works out of the box.</li>
</ul>


<p>Before I go further: know that I really like the Searchable plugin.  It's a great way to get search in a smaller application.</p>

<!--more-->


<h3>Adding Searchable to a Project: A dramatization</h3>

<p>You're working on a project.  The end of the lap is near, and your task is to implement a simple search screen.</p>

<p>You find Searchable and decide to try it out.</p>

<p>Installation's easy. <code>grails install-plugin searchable</code> or <code>:searchable:0.6.4</code> in your BuildConfig.  Tweak some settings, and within an hour, you've got an embedded full text search engine.</p>

<p>"Man, that's cool," you think to yourself.  "And so easy to use. I love it."</p>

<p>You proudly show it off to your project sponsors: "Look! Embedded Google, right in the app!  Look fast it is!"</p>

<p>Everyone loves it. Your manager thinks you're a rock star.  Life is great.</p>

<p>Your QA team notices some searches randomly failing while testing the app, but you can't reproduce it.  You research it for hours, can't determine the cause, and eventually blame some random piece of infrastructure for your concerns.</p>

<p>"I know the network guys were scheduled to do that switch firmware upgrade, that must have been it."</p>

<h4>Then, Production Deployment.</h4>

<p>Your users are loving the full text search. Your app is a success and everyone pats you on the back.</p>

<p>Meanwhile, your search index is adding rows by the minute as your database grows.  The random failure from QA is lurking there, in the shadows, planning the perfect moment to jump up and bite you.</p>

<h4>Six months later...</h4>

<p>...your app suddenly crashes, hard.  No data updates are happening -- database transactions are timing out like crazy.  You frantically turn up logging and throw your full effort at debugging.  Since it's a transaction timeout, you focus on the database.</p>

<p>You've got your ops team, your DBAs, and your network team frantically checking to see what could be causing the issue.</p>

<p>After hours of fruitless troubleshooting, you finally remember the bug that you ignored.  Now you see that the "random search problem" wasn't random at all.</p>

<p>Further research reveals that <em>storing the Compass index on an NFS mount</em> was the cause of the problem. It's in the documentation.  While researching, you find:</p>

<h5><em><a href="http://www.compass-project.org">Compass</a>, a core library used by Searchable, is no longer maintained.</em></h5>

<p>You realize with surprise that the most popular search plugin for Grails uses an obsolete library to map GORM objects to it's Lucene search index.</p>

<p>The author has abandoned Compass and created <a href="http://www.elasticsearch.org">Elastic Search</a>, which, now that you look at it, looks to be a much better solution.</p>

<h5><em>Nobody uses Searchable with indexes that are shared and mirrored across multiple app instances.</em></h5>

<p>You weren't a total idiot when you built your app -- you decided to launch several Tomcat instances and load balance them.  In order for updates made in one node to show up in the others, you enabled mirroring in all nodes.</p>

<p>What you didn't realize is that in order to share the index files, you had to use something like an NFS mount to share them among instances.</p>

<p>Then, suddenly, it hits you like a ton of bricks:</p>

<h5><em>Tbe most popular Grails plugin for searching -- Searchable -- is great for a quick solution.  But it is not designed for scaling to multiple instances very well.</em></h5>

<p>You start work porting the app to a different search technology -- like <a href="http://lucene.apache.org/solr/">Apache Solr</a> or <a href="http://www.elasticsearch.org">Elastic Search</a> -- and writing a <a href="http://asinesio.github.com/blog/2013/02/23/the-perils-of-the-grails-searchable-plugin/">blog post</a> to help prevent others from making the same mistake.</p>

<h3>What did you learn?</h3>

<ol>
<li><p>Much like high school kids, the popular plugins are not necessarily the best plugins.</p></li>
<li><p><em>Pay attention to what libraries are used by your dependencies before you choose them</em> or you may end up with dead-end software in your application.</p></li>
<li><p>The simplest solution may not be the best solution.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching Grails Versions]]></title>
    <link href="http://asinesio.github.com/blog/2013/02/13/switch-grails-versions/"/>
    <updated>2013-02-13T00:00:00-06:00</updated>
    <id>http://asinesio.github.com/blog/2013/02/13/switch-grails-versions</id>
    <content type="html"><![CDATA[<p>This is my #firstpost, so I thought I'd share a useful Grails shell script.</p>

<p>(<strong>Update: you really should use <a href="http://gvmtool.net">gvm</a> instead of this script.</strong> It is a similar idea but also handles installation, path setup, and other tools like Gradle, vert.x, and Griffon.)</p>

<p>One of the annoying things about using <a href="http://www.grails.org">Grails</a> from the command line is dealing with multiple Grails versions on your system.</p>

<p>This isn't an issue if you're using an IDE that can refer to a Grails version outside of your $PATH.  However, I find that using a command-line Grails in combination with an IDE like STS or GGTS is the most productive way for me to write Grails code.</p>

<!--more-->


<p>If you do nothing special, you'll find yourself adding the following to your <code>~/.bash_profile</code>  to make Grails work from a command line:</p>

<pre><code>GRAILS_HOME = /Users/asinesio/dev/tools/grails-2.1.0
export PATH=$PATH:$GRAILS_HOME/bin
</code></pre>

<p>Of course, you now have to change your <code>.bash_profile</code> every time you switch projects. Fail.</p>

<p>The obvious solution is a simple shell script that leverages the following ideas:</p>

<ol>
<li>Use a symbolic link from something like <code>/Users/asinesio/dev/tools/grails</code> to the actual Grails version you want to use.</li>
<li>Set this link as <code>GRAILS_HOME</code>.</li>
<li>Add <code>GRAILS_HOME/bin</code> to your <code>PATH</code>.</li>
<li>Use a <a href="https://gist.github.com/asinesio/4946855">shell script</a> on your path to automatically change the symbolic link to point to the correct Grails version.</li>
</ol>


<p>Once you've done that, changing is as easy as running: <code>grails-switch-version.sh 2.2.0</code></p>

<p><div><script src='https://gist.github.com/4946855.js?file=grails-switch-version.sh'></script>
<noscript><pre><code>#!/bin/bash
# This script will switch the active version of Grails.  Tested on Mac OS X 10.7 and 10.8. Read install directions first!
# 
# This software is copyright (c) 2012 Andy Sinesio. It's distributed under the MIT License: http://opensource.org/licenses/mit-license.php
# 
# Installation steps:
#    - Make sure GRAILS_HOME is pointing at a symbolic link that points one of your actual grails installations.
#       1) ln -s ~/dev/tools/grails-2.2.0 ~/dev/tools/grails
#       2) Set GRAILS_HOME in ~/.bash_profile to be the symlink, e.g. ~/dev/tools/grails
#    - Place this file in any directory (preferably on your PATH, e.g. ~/bin) with execute permissions
#    - Change GRAILS_INSTALL_DIRS to the folder on your computer that has all of your downloaded Grails installs, if needed.
#
# Usage:  grails-switch-version.sh 2.1.0

GRAILS_INSTALL_DIRS=&quot;$HOME/dev/tools&quot;
GRAILS_DIR_PREFIX=&quot;grails-&quot;
NEW_GRAILS_DIR=&quot;$GRAILS_INSTALL_DIRS/$GRAILS_DIR_PREFIX$1&quot;

if [ -L &quot;$GRAILS_HOME&quot; ] &amp;&amp; [ -d &quot;$NEW_GRAILS_DIR&quot; ]; then
        echo &quot;Removing existing symlink version of Grails at $GRAILS_HOME, linking to $NEW_GRAILS_DIR&quot;
        rm $GRAILS_HOME
        ln -s $NEW_GRAILS_DIR $GRAILS_HOME
        $GRAILS_HOME/bin/grails --version
else
        echo &quot;Usage: grails-switch-version.sh &lt;&lt;VERSION_NUMBER&gt;&gt;, e.g. grails-switch-version.sh 2.2.0&quot;
        echo &quot;Make sure that GRAILS_HOME ($GRAILS_HOME) is a symbolic link and grails versions are extracted in $GRAILS_INSTALL_DIRS&quot;
fi</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
